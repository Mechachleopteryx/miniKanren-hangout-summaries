Chez Scheme Version 9.4.1
Copyright 1984-2016 Cisco Systems, Inc.

> rember

Exception: variable rember is not bound
Type (debug) to enter the debugger.
> 
Exception: variable z is not bound
Type (debug) to enter the debugger.
> (define rember
  (lambda (x ls)
    (cond
      [(null? ls) '()]
      [(eqv? (car ls) x) (cdr ls)]
      [else (cons (car ls) (rember x (cdr ls)))])))
> (rember 'x '())
()
> (rember 'x '(y x z))
(y z)
> (rember 'x '(x y z))
(y z)
> (rember 'x '(y x z x))
(y z x)
> (rember 'x '(x y z x))
(y z x)
> (rember 'v '(y x z x))
(y x z x)
> 

Process scheme finished
Chez Scheme Version 9.4.1
Copyright 1984-2016 Cisco Systems, Inc.

> (define rember
  (lambda (x ls)
    (cond
      [(let ((a (car ls)))
         (let ((pt (pair? ls)))
           (let ((net (not-eqv? a x)))
             (and pt net))))
       (let ((d (cdr ls)))
         (let ((a (car ls)))
           (let ((res (rember x d)))
             (cons a res))))]
      [(let ((a (car ls)))
         (let ((pt (pair? ls)))
           (let ((et (eqv? a x)))
             (and pt et))))
       (cdr ls)]
      [(null? ls) '()])))
> (rember 'v '(y x z x))

Exception: variable not-eqv? is not bound
Type (debug) to enter the debugger.
> (define not-eqv?
  (lambda (v1 v2)
    (not (eqv? v1 v2))))
> (rember 'v '(y x z x))

Exception in car: () is not a pair
Type (debug) to enter the debugger.
> (define rember
  (lambda (x ls)
    (cond
      [(let ((pt (pair? ls)))
         (let ((a (car ls)))
           (let ((net (not-eqv? a x)))
             (and pt net))))
       (let ((d (cdr ls)))
         (let ((a (car ls)))
           (let ((res (rember x d)))
             (cons a res))))]
      [(let ((pt (pair? ls)))
         (let ((a (car ls)))
           (let ((et (eqv? a x)))
             (and pt et))))
       (cdr ls)]
      [(null? ls) '()])))

> (rember 'v '(y x z x))

Exception in car: () is not a pair
Type (debug) to enter the debugger.
> (define rember
  (lambda (x ls)
    (cond
      [(let ((pt (pair? ls)))
         (and pt
              (let ((a (car ls)))
                (let ((net (not-eqv? a x)))
                  net))))
       (let ((d (cdr ls)))
         (let ((a (car ls)))
           (let ((res (rember x d)))
             (cons a res))))]
      [(let ((pt (pair? ls)))
         (and pt
              (let ((a (car ls)))
                (let ((et (eqv? a x)))
                  et))))
       (cdr ls)]
      [(null? ls) '()])))
> (rember 'v '(y x z x))
(y x z x)
> (define rembero
  (lambda (x ls ls-x)
    (conde
      [(== '() ls) (== '() ls-x)]
      [(fresh (d)
         (== `(,x . ,d) ls)
         (== d ls-x))]
      [(fresh (a d res)
         (== `(,a . ,d) ls)
         (=/= x a)
         (== (cons a res) ls-x)
         (rembero x d res))])))

> (run 1 (q) (== q 5))

Exception: variable q is not bound
Type (debug) to enter the debugger.
> 

Process scheme finished
Chez Scheme Version 9.4.1
Copyright 1984-2016 Cisco Systems, Inc.

> (load "hangout-9.scm")
> (run 1 (q) (== q 5))
(5)
> (run 1 (q) (rembero 'x '(x y z x) q))
((y z x))
> (run 1 (q)
    (rembero 'x '(x y z x) '(y z x)))
(_.0)
> (run 1 (q)
    (rembero 'x q '(y z x)))
((x y z x))
> (run 2 (q)
    (rembero 'x q '(y z x)))
((x y z x) (y x z x))
> (run 3 (q)
    (rembero 'x q '(y z x)))
((x y z x) (y x z x) (y z x x))
> (run 4 (q)
    (rembero 'x q '(y z x)))
((x y z x) (y x z x) (y z x x))
> (run* (q)
    (rembero 'x q '(y z x)))
((x y z x) (y x z x) (y z x x))
> 
  C-c C-c
> (run* (x y)
    (rembero x y '(y z x)))
((_.0 (_.0 y z x))
 ((_.0 (y _.0 z x)) (=/= ((_.0 y))))
 ((_.0 (y z _.0 x)) (=/= ((_.0 y)) ((_.0 z))))
 ((_.0 (y z x)) (=/= ((_.0 x)) ((_.0 y)) ((_.0 z))))
 ((_.0 (y z x _.0)) (=/= ((_.0 x)) ((_.0 y)) ((_.0 z)))))
> 

Process scheme finished
Chez Scheme Version 9.4.1
Copyright 1984-2016 Cisco Systems, Inc.

> (load "hangout-9.scm")
> (run* (q)
    (rembero 'x q '(y z x)))
((x y z x) (y x z x) (y z x x))
> 'foo
foo
> 'dog
dog
> 'cat
cat
> (symbol? 'cat)
#t
> (symbol? 5)
#f
> (run 1 (q) (symbolo 'cat))
(_.0)
> (run 1 (q) (symbolo 5))
()
> (run 1 (q) (numbero 5))
(_.0)
> (run 1 (q) (numbero 'cat))
()
> (run 1 (q) (numbero (cons 3 4)))
()
> (run 1 (q) (symbolo (cons 3 4)))
()
> 

Process scheme finished
Chez Scheme Version 9.4.1
Copyright 1984-2016 Cisco Systems, Inc.

> (load "hangout-9.scm")
> (run 1 (q)
    (parseo 'x))
(_.0)
> (run 1 (q)
    (parseo '5))
()
> (run 1 (q)
    (parseo '(lambda (y) y)))
(_.0)
> (run 1 (q)
    (parseo '(lambda (y) 5)))
()
> (run 1 (q)
    (parseo '(lambda (y z) y)))
()
> (run 1 (q)
    (parseo '((lambda (y) y) (lambda (y) y))))
(_.0)
> (run 1 (q)
    (parseo '((lambda (y) y) (lambda (y) y) (lambda (y) y))))
()
> (run 1 (q)
    (parseo q))
((_.0 (sym _.0)))
> (run 2 (q)
    (parseo q))
((_.0 (sym _.0))
 ((lambda (_.0) _.1) (sym _.0 _.1)))
> (run 3 (q)
    (parseo q))
((_.0 (sym _.0))
 ((lambda (_.0) _.1) (sym _.0 _.1))
 ((_.0 _.1) (sym _.0 _.1)))
> (run 4 (q)
    (parseo q))
((_.0 (sym _.0))
 ((lambda (_.0) _.1) (sym _.0 _.1))
 ((_.0 _.1) (sym _.0 _.1))
 ((lambda (_.0) (lambda (_.1) _.2)) (sym _.0 _.1 _.2)))
> (run 5 (q)
    (parseo q))
((_.0 (sym _.0))
  ((lambda (_.0) _.1) (sym _.0 _.1))
  ((_.0 _.1) (sym _.0 _.1))
  ((lambda (_.0) (lambda (_.1) _.2)) (sym _.0 _.1 _.2))
  ((lambda (_.0) (_.1 _.2)) (sym _.0 _.1 _.2)))
> (run 100 (q)
    (parseo q))
((_.0 (sym _.0)) ((lambda (_.0) _.1) (sym _.0 _.1))
 ((_.0 _.1) (sym _.0 _.1))
 ((lambda (_.0) (lambda (_.1) _.2)) (sym _.0 _.1 _.2))
 ((lambda (_.0) (_.1 _.2)) (sym _.0 _.1 _.2))
 ((_.0 (lambda (_.1) _.2)) (sym _.0 _.1 _.2))
 (((lambda (_.0) _.1) _.2) (sym _.0 _.1 _.2))
 ((lambda (_.0) (lambda (_.1) (lambda (_.2) _.3)))
   (sym _.0 _.1 _.2 _.3))
 ((_.0 (_.1 _.2)) (sym _.0 _.1 _.2))
 ((lambda (_.0) (lambda (_.1) (_.2 _.3)))
   (sym _.0 _.1 _.2 _.3))
 ((lambda (_.0) (_.1 (lambda (_.2) _.3)))
   (sym _.0 _.1 _.2 _.3))
 ((lambda (_.0) ((lambda (_.1) _.2) _.3))
   (sym _.0 _.1 _.2 _.3))
 ((_.0 (lambda (_.1) (lambda (_.2) _.3)))
   (sym _.0 _.1 _.2 _.3))
 (((lambda (_.0) _.1) (lambda (_.2) _.3))
   (sym _.0 _.1 _.2 _.3))
 ((lambda (_.0)
    (lambda (_.1) (lambda (_.2) (lambda (_.3) _.4))))
   (sym _.0 _.1 _.2 _.3 _.4))
 (((_.0 _.1) _.2) (sym _.0 _.1 _.2))
 ((lambda (_.0) (_.1 (_.2 _.3))) (sym _.0 _.1 _.2 _.3))
 ((_.0 (lambda (_.1) (_.2 _.3))) (sym _.0 _.1 _.2 _.3))
 (((lambda (_.0) _.1) (_.2 _.3)) (sym _.0 _.1 _.2 _.3))
 ((lambda (_.0) (lambda (_.1) (lambda (_.2) (_.3 _.4))))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((_.0 (_.1 (lambda (_.2) _.3))) (sym _.0 _.1 _.2 _.3))
 ((lambda (_.0) (lambda (_.1) (_.2 (lambda (_.3) _.4))))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((_.0 ((lambda (_.1) _.2) _.3)) (sym _.0 _.1 _.2 _.3))
 ((lambda (_.0) (lambda (_.1) ((lambda (_.2) _.3) _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0) (_.1 (lambda (_.2) (lambda (_.3) _.4))))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0) ((lambda (_.1) _.2) (lambda (_.3) _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((_.0 (lambda (_.1) (lambda (_.2) (lambda (_.3) _.4))))
   (sym _.0 _.1 _.2 _.3 _.4))
 (((lambda (_.0) _.1) (lambda (_.2) (lambda (_.3) _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0)
    (lambda (_.1)
      (lambda (_.2) (lambda (_.3) (lambda (_.4) _.5)))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 (((_.0 _.1) (lambda (_.2) _.3)) (sym _.0 _.1 _.2 _.3))
 ((lambda (_.0) ((_.1 _.2) _.3)) (sym _.0 _.1 _.2 _.3))
 (((lambda (_.0) (lambda (_.1) _.2)) _.3)
   (sym _.0 _.1 _.2 _.3))
 ((_.0 (_.1 (_.2 _.3))) (sym _.0 _.1 _.2 _.3))
 ((lambda (_.0) (lambda (_.1) (_.2 (_.3 _.4))))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0) (_.1 (lambda (_.2) (_.3 _.4))))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0) ((lambda (_.1) _.2) (_.3 _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((_.0 (lambda (_.1) (lambda (_.2) (_.3 _.4))))
   (sym _.0 _.1 _.2 _.3 _.4))
 (((lambda (_.0) _.1) (lambda (_.2) (_.3 _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0)
    (lambda (_.1) (lambda (_.2) (lambda (_.3) (_.4 _.5)))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 (((_.0 _.1) (_.2 _.3)) (sym _.0 _.1 _.2 _.3))
 ((lambda (_.0) (_.1 (_.2 (lambda (_.3) _.4))))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((_.0 (lambda (_.1) (_.2 (lambda (_.3) _.4))))
   (sym _.0 _.1 _.2 _.3 _.4))
 (((lambda (_.0) _.1) (_.2 (lambda (_.3) _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0)
    (lambda (_.1) (lambda (_.2) (_.3 (lambda (_.4) _.5)))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((lambda (_.0) (_.1 ((lambda (_.2) _.3) _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((_.0 (lambda (_.1) ((lambda (_.2) _.3) _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 (((lambda (_.0) _.1) ((lambda (_.2) _.3) _.4))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((_.0 (_.1 (lambda (_.2) (lambda (_.3) _.4))))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0)
    (lambda (_.1) (lambda (_.2) ((lambda (_.3) _.4) _.5))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((lambda (_.0)
    (lambda (_.1) (_.2 (lambda (_.3) (lambda (_.4) _.5)))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((_.0 ((lambda (_.1) _.2) (lambda (_.3) _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0)
    (lambda (_.1) ((lambda (_.2) _.3) (lambda (_.4) _.5))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((lambda (_.0)
    (_.1 (lambda (_.2) (lambda (_.3) (lambda (_.4) _.5)))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((lambda (_.0)
    ((lambda (_.1) _.2) (lambda (_.3) (lambda (_.4) _.5))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((_.0 (lambda (_.1)
         (lambda (_.2) (lambda (_.3) (lambda (_.4) _.5)))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 (((lambda (_.0) _.1)
    (lambda (_.2) (lambda (_.3) (lambda (_.4) _.5))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((_.0 ((_.1 _.2) _.3)) (sym _.0 _.1 _.2 _.3))
 ((lambda (_.0)
    (lambda (_.1)
      (lambda (_.2)
        (lambda (_.3) (lambda (_.4) (lambda (_.5) _.6))))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5 _.6))
 (((_.0 _.1) (lambda (_.2) (lambda (_.3) _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0) ((_.1 _.2) (lambda (_.3) _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0) (lambda (_.1) ((_.2 _.3) _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 (((lambda (_.0) (lambda (_.1) _.2)) (lambda (_.3) _.4))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0) ((lambda (_.1) (lambda (_.2) _.3)) _.4))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0) (_.1 (_.2 (_.3 _.4))))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((_.0 (lambda (_.1) (_.2 (_.3 _.4))))
   (sym _.0 _.1 _.2 _.3 _.4))
 (((lambda (_.0) _.1) (_.2 (_.3 _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0)
    (lambda (_.1) (lambda (_.2) (_.3 (_.4 _.5)))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((_.0 (_.1 (lambda (_.2) (_.3 _.4))))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0)
    (lambda (_.1) (_.2 (lambda (_.3) (_.4 _.5)))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((_.0 ((lambda (_.1) _.2) (_.3 _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0)
    (lambda (_.1) ((lambda (_.2) _.3) (_.4 _.5))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((lambda (_.0)
    (_.1 (lambda (_.2) (lambda (_.3) (_.4 _.5)))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((lambda (_.0)
    ((lambda (_.1) _.2) (lambda (_.3) (_.4 _.5))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((_.0 (lambda (_.1)
         (lambda (_.2) (lambda (_.3) (_.4 _.5)))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 (((lambda (_.0) _.1)
    (lambda (_.2) (lambda (_.3) (_.4 _.5))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((lambda (_.0)
    (lambda (_.1)
      (lambda (_.2) (lambda (_.3) (lambda (_.4) (_.5 _.6))))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5 _.6))
 (((_.0 _.1) (lambda (_.2) (_.3 _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0) ((_.1 _.2) (_.3 _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 (((lambda (_.0) (lambda (_.1) _.2)) (_.3 _.4))
   (sym _.0 _.1 _.2 _.3 _.4))
 (((lambda (_.0) (_.1 _.2)) _.3) (sym _.0 _.1 _.2 _.3))
 ((_.0 (_.1 (_.2 (lambda (_.3) _.4))))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0)
    (lambda (_.1) (_.2 (_.3 (lambda (_.4) _.5)))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((lambda (_.0)
    (_.1 (lambda (_.2) (_.3 (lambda (_.4) _.5)))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((lambda (_.0)
    ((lambda (_.1) _.2) (_.3 (lambda (_.4) _.5))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((_.0 (lambda (_.1)
         (lambda (_.2) (_.3 (lambda (_.4) _.5)))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 (((lambda (_.0) _.1)
    (lambda (_.2) (_.3 (lambda (_.4) _.5))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((lambda (_.0)
    (lambda (_.1)
      (lambda (_.2) (lambda (_.3) (_.4 (lambda (_.5) _.6))))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5 _.6))
 (((_.0 _.1) (_.2 (lambda (_.3) _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((_.0 (_.1 ((lambda (_.2) _.3) _.4)))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((lambda (_.0)
    (lambda (_.1) (_.2 ((lambda (_.3) _.4) _.5))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((lambda (_.0)
    (_.1 (lambda (_.2) ((lambda (_.3) _.4) _.5))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((lambda (_.0)
    ((lambda (_.1) _.2) ((lambda (_.3) _.4) _.5)))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((_.0 (lambda (_.1)
         (lambda (_.2) ((lambda (_.3) _.4) _.5))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 (((lambda (_.0) _.1)
    (lambda (_.2) ((lambda (_.3) _.4) _.5)))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((lambda (_.0)
    (_.1 (_.2 (lambda (_.3) (lambda (_.4) _.5)))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((lambda (_.0)
    (lambda (_.1)
      (lambda (_.2) (lambda (_.3) ((lambda (_.4) _.5) _.6)))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5 _.6))
 (((_.0 _.1) ((lambda (_.2) _.3) _.4))
   (sym _.0 _.1 _.2 _.3 _.4))
 ((_.0 (lambda (_.1)
         (_.2 (lambda (_.3) (lambda (_.4) _.5)))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 (((lambda (_.0) _.1)
    (_.2 (lambda (_.3) (lambda (_.4) _.5))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5))
 ((lambda (_.0)
    (lambda (_.1)
      (lambda (_.2) (_.3 (lambda (_.4) (lambda (_.5) _.6))))))
   (sym _.0 _.1 _.2 _.3 _.4 _.5 _.6)))
> (lambda (x)
    (lambda (y)
      (lambda (z)
        (w (lambda (v) (lambda (t) s))))))
#<procedure>
> 

Process scheme finished
Chez Scheme Version 9.4.1
Copyright 1984-2016 Cisco Systems, Inc.

> (load "hangout-9.scm")
> (run 5 (q)
    (parseo q))
((_.0 (num _.0))
 (_.0 (sym _.0))
 ((lambda (_.0) _.1) (num _.1) (sym _.0))
 ((lambda (_.0) _.1) (sym _.0 _.1))
 ((lambda (_.0) (lambda (_.1) _.2)) (num _.2) (sym _.0 _.1)))
> (run 10 (q)
    (parseo q))
((_.0 (num _.0)) (_.0 (sym _.0)) ((lambda (_.0) _.1) (num _.1) (sym _.0))
  ((lambda (_.0) _.1) (sym _.0 _.1))
  ((lambda (_.0) (lambda (_.1) _.2)) (num _.2) (sym _.0 _.1))
  ((let ([_.0 _.1]) _.2) (num _.1 _.2) (sym _.0))
  ((_.0 _.1) (num _.0 _.1))
  ((lambda (_.0) (lambda (_.1) _.2)) (sym _.0 _.1 _.2))
  ((let ([_.0 _.1]) _.2) (num _.1) (sym _.0 _.2))
  ((_.0 _.1) (num _.0) (sym _.1)))
> (let ([z 5])
    132)
132
> (let ([x 7])
    x)
7
> (let ([x 7])
    y)

Exception: variable y is not bound
Type (debug) to enter the debugger.
> 

Process scheme finished
Chez Scheme Version 9.4.1
Copyright 1984-2016 Cisco Systems, Inc.

> (load "hangout-9.scm")
> (run 5 (q)
    (parseo q #t))
((_.0 (sym _.0))
 ((lambda (_.0) _.1) (sym _.0 _.1))
 ((_.0 _.1) (sym _.0 _.1))
 ((lambda (_.0) (lambda (_.1) _.2)) (sym _.0 _.1 _.2))
 ((lambda (_.0) (_.1 _.2)) (sym _.0 _.1 _.2)))
> (run* (q)
    (parseo '(lambda (z) y) q))
(#t)
> (run* (q)
    (parseo '(lambda (z w) y) q))
(#f)
> (run 5 (q)
    (parseo q #f))
((_.0 (num _.0))
 (lambda () _.0)
 (lambda (_.0 _.1 . _.2) _.3)
 ((lambda (_.0) _.1) (num _.1) (sym _.0))
 ((_.0 _.1) (num _.0)))
> 

Process scheme finished
Chez Scheme Version 9.4.1
Copyright 1984-2016 Cisco Systems, Inc.

> (load "hangout-9.scm")
> (run 5 (q)
    (parseo q #f))
((_.0 (num _.0))
 ((lambda () _.0) (num _.0))
 ((lambda () _.0) (sym _.0))
 ((lambda (_.0 _.1 . _.2) _.3) (num _.3))
 ((lambda (_.0 _.1 . _.2) _.3) (sym _.3)))
> (run 10 (q)
    (parseo q #f))
((_.0 (num _.0)) ((lambda () _.0) (num _.0)) ((lambda () _.0) (sym _.0))
  ((lambda (_.0 _.1 . _.2) _.3) (num _.3))
  ((lambda (_.0 _.1 . _.2) _.3) (sym _.3))
  ((lambda () (lambda () _.0)) (num _.0))
  ((lambda () (lambda () _.0)) (sym _.0))
  ((lambda () (lambda (_.0 _.1 . _.2) _.3)) (num _.3))
  ((lambda (_.0) _.1) (num _.1) (sym _.0))
  ((lambda (_.0 _.1 . _.2) (lambda () _.3)) (num _.3)))
> (run 10 (x y)
    (parseo x y))
(((_.0 #f) (num _.0))
 ((_.0 #t) (sym _.0))
 (((lambda () _.0) #f) (num _.0))
 (((lambda () _.0) #f) (sym _.0))
 (((lambda (_.0 _.1 . _.2) _.3) #f) (num _.3))
 (((lambda (_.0 _.1 . _.2) _.3) #f) (sym _.3))
 (((lambda () (lambda () _.0)) #f) (num _.0))
 (((lambda () (lambda () _.0)) #f) (sym _.0))
 (((lambda () (lambda (_.0 _.1 . _.2) _.3)) #f) (num _.3))
 (((lambda (_.0 _.1 . _.2) (lambda () _.3)) #f) (num _.3)))
> (run 20 (x y)
    (parseo x y))
(((_.0 #f) (num _.0)) ((_.0 #t) (sym _.0)) (((lambda () _.0) #f) (num _.0))
  (((lambda () _.0) #f) (sym _.0))
  (((lambda (_.0 _.1 . _.2) _.3) #f) (num _.3))
  (((lambda (_.0 _.1 . _.2) _.3) #f) (sym _.3))
  (((lambda () (lambda () _.0)) #f) (num _.0))
  (((lambda () (lambda () _.0)) #f) (sym _.0))
  (((lambda () (lambda (_.0 _.1 . _.2) _.3)) #f) (num _.3))
  (((lambda (_.0 _.1 . _.2) (lambda () _.3)) #f) (num _.3))
  (((lambda () (lambda (_.0 _.1 . _.2) _.3)) #f) (sym _.3))
  (((lambda (_.0) _.1) #t) (sym _.0 _.1))
  (((lambda () (lambda () (lambda () _.0))) #f) (num _.0))
  (((lambda (_.0 _.1 . _.2) (lambda () _.3)) #f) (sym _.3))
  (((lambda (_.0) _.1) #f) (num _.1) (sym _.0))
  (((lambda () (lambda () (lambda () _.0))) #f) (sym _.0))
  (((lambda (_.0 _.1 . _.2) (lambda (_.3 _.4 . _.5) _.6)) #f)
    (num _.6))
  (((lambda () (lambda () (lambda (_.0 _.1 . _.2) _.3))) #f)
    (num _.3))
  (((lambda (_.0 _.1 . _.2) (lambda (_.3 _.4 . _.5) _.6)) #f)
    (sym _.6))
  (((_.0 _.1) #t) (sym _.0 _.1)))
> 